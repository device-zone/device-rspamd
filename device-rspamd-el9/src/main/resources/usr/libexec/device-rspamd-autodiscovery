#!/bin/bash

#
# Rspamd Autodiscovery
# ====================
#
# This script autogenerates the configuration for an rspamd server.

set -e
umask 0022



#
# worker-proxy.inc
# ----------------

logger -t "${0}" "Notice: Creating rspamd worker-proxy.inc..."

worker_proxy_inc=`umask 0077; mktemp /etc/rspamd/local.d/worker-proxy.inc.XXXXXX`
chmod 644 "${worker_proxy_inc}"

  cat >> ${worker_proxy_inc} <<- EOF
# Generated by $0 on `date`
# DO NOT MODIFY THIS FILE - it will be overwritten on server restart.
#

# local.d/worker-proxy.inc
upstream "local" {
  self_scan = yes; # Enable self-scan
}

# Proxy worker is listening on *:11332 by default
#bind_socket = localhost:11332;
bind_socket = /run/rspamd/rspamd-proxy.sock mode=0660

EOF

mv "${worker_proxy_inc}" "/etc/rspamd/local.d/worker-proxy.inc"


#
# worker-controller.inc
# ---------------------

logger -t "${0}" "Notice: Creating rspamd worker-controller.inc..."

worker_controller_inc=`umask 0077; mktemp /etc/rspamd/local.d/worker-controller.inc.XXXXXX`
chmod 644 "${worker_controller_inc}"

  cat >> ${worker_controller_inc} <<- EOF
# Generated by $0 on `date`
# DO NOT MODIFY THIS FILE - it will be overwritten on server restart.
#

# local.d/worker-controller.inc
bind_socket = /run/rspamd/rspamd-controller.sock mode=0660

EOF

mv "${worker_controller_inc}" "/etc/rspamd/local.d/worker-controller.inc"



#
# arc.conf
# --------

if [ -z "disabled" ]; then

logger -t "${0}" "Notice: Creating rspamd arc.conf..."

arc_conf=`umask 0077; mktemp /etc/rspamd/local.d/arc.conf.XXXXXX`
chmod 644 "${arc_conf}"

if [ -s "/etc/device/services/mail/smtp/arc/domain.txt" -a -s "/etc/device/services/mail/smtp/arc/key.pem" ]; then

  domain=$(head -n 1 "/etc/device/services/mail/smtp/arc/domain.txt")
  selector=default
  if [ -s "/etc/device/services/mail/smtp/arc/selector.txt" ]; then
      selector=$(head -n 1 "/etc/device/services/mail/smtp/arc/selector.txt")
  fi

  cat >> ${arc_conf} <<- EOF
# Generated by $0 on `date`
# DO NOT MODIFY THIS FILE - it will be overwritten on server restart.
#

# local.d/arc.conf
enabled = true;

# If false, messages with empty envelope from are not signed
allow_envfrom_empty = true;
# If true, envelope/header domain mismatch is ignored
allow_hdrfrom_mismatch = false;
# If true, multiple from headers are allowed (but only first is used)
allow_hdrfrom_multiple = false;
# If true, username does not need to contain matching domain
allow_username_mismatch = false;
# Set the domain
domain = "${domain}";
# Default path to key, can include '\$domain' and '\$selector' variables
path = "/var/lib/rspamd/arc/${domain}.${selector}.key";
# Default selector to use
selector = "${selector}";
# If false, messages from authenticated users are not selected for signing
sign_authenticated = true;
# If false, messages from local networks are not selected for signing
sign_local = true;
# Symbol to add when message is signed
symbol_signed = "ARC_SIGNED";
# Whether to fallback to global config
try_fallback = true;
# Domain to use for ARC signing: can be "header" or "envelope"
use_domain = "header";
# Whether to normalise domains to eSLD
use_esld = true;
# Whether to get keys from Redis
use_redis = false;
# Hash for ARC keys in Redis
key_prefix = "ARC_KEYS";
# map of domains -> names of selectors (since rspamd 1.5.3)
#selector_map = "/etc/rspamd/maps.d/arc_selectors.map";
# map of domains -> paths to keys (since rspamd 1.5.3)
#path_map = "/etc/rspamd/maps.d/arc_paths.map";

EOF

else

  cat >> ${arc_conf} <<- EOF
# Generated by $0 on `date`
# DO NOT MODIFY THIS FILE - it will be overwritten on server restart.
#

# local.d/arc.conf
enabled = false;

EOF

fi

mv "${arc_conf}" "/etc/rspamd/local.d/arc.conf"

fi


#
# dkim_signing.conf
# -----------------

if [ -z "disabled" ]; then

logger -t "${0}" "Notice: Creating rspamd dkim_signing.conf..."

dkim_signing_conf=`umask 0077; mktemp /etc/rspamd/local.d/dkim_signing.conf.XXXXXX`
chmod 644 "${dkim_signing_conf}"

cat >> ${dkim_signing_conf} <<- EOF
# Generated by $0 on `date`
# DO NOT MODIFY THIS FILE - it will be overwritten on server restart.
#

# local.d/dkim_signing.conf
enabled = true;

# If false, messages with empty envelope from are not signed
allow_envfrom_empty = true;

# If true, envelope/header domain mismatch is ignored
allow_hdrfrom_mismatch = false;

# If true, multiple from headers are allowed (but only first is used)
allow_hdrfrom_multiple = false;

# If true, username does not need to contain matching domain
allow_username_mismatch = true;

# Default path to key, can include '$domain' and '$selector' variables
#path = "/var/lib/rspamd/dkim/$domain.$selector.key";

# Default selector to use
#selector = "dkim";

# If false, messages from authenticated users are not selected for signing
sign_authenticated = true;

# If false, messages from local networks are not selected for signing
sign_local = true;

# Map file of IP addresses/subnets to consider for signing
# sign_networks = "/some/file"; # or url

# Symbol to add when message is signed
symbol = "DKIM_SIGNED";

# Whether to fallback to global config
try_fallback = false;

# Domain to use for DKIM signing: can be "header" (MIME From), "envelope" (SMTP From) or "auth" (SMTP username)
use_domain = "header";

# Domain to use for DKIM signing when sender is in sign_networks ("header"/"envelope"/"auth")
#use_domain_sign_networks = "header";

# Domain to use for DKIM signing when sender is a local IP ("header"/"envelope"/"auth")
#use_domain_sign_local = "header";

# Whether to normalise domains to eSLD
use_esld = true;

# Whether to get keys from Redis
use_redis = false;

# Hash for DKIM keys in Redis
#key_prefix = "DKIM_KEYS";

# map of domains -> names of selectors (since rspamd 1.5.3)
selector_map = "/etc/rspamd/maps.d/dkim_selectors.map";

# map of domains -> paths to keys (since rspamd 1.5.3)
path_map = "/etc/rspamd/maps.d/dkim_paths.map";

# If `true` get pubkey from DNS record and check if it matches private key
check_pubkey = true;
# Set to `false` if you want to skip signing if public and private keys mismatch
allow_pubkey_mismatch = false;

EOF

mv "${dkim_signing_conf}" "/etc/rspamd/local.d/dkim_signing.conf"

if [ -d "/etc/device/services/mail/smtp/dkim" ]; then

  dkim_selectors_map=`umask 0077; mktemp /etc/rspamd/maps.d/dkim_selectors.map.XXXXXX`
  chmod 644 "${dkim_selectors_map}"
  dkim_paths_map=`umask 0077; mktemp /etc/rspamd/maps.d/dkim_paths.map.XXXXXX`
  chmod 644 "${dkim_paths_map}"
  for dkim in $(find "/etc/device/services/mail/smtp/dkim" -mindepth 1 -maxdepth 1 -type d)
  do
    domain=$(basename ${dkim})
    selector=default
    if [ -s "${dkim}/selector.txt" ]; then
      selector=$(head -n 1 "${dkim}/selector.txt")
    fi
    if [ -s "${dkim}/key.pem" ]; then
      install -d -m 0700 -o rspamd -g rspamd "/var/lib/rspamd/dkim"
      rm -f "/var/lib/rspamd/dkim/${domain}.*.key"
      install -m 0600 -o rspamd -g rspamd "${dkim}/key.pem" "/var/lib/rspamd/dkim/${domain}.${selector}.key"
    fi
    echo "${domain} ${selector}" >> "${dkim_selectors_map}"
    echo "${domain} /var/lib/rspamd/dkim/${domain}.${selector}.key" >> "${dkim_paths_map}"
  done
  mv "${dkim_selectors_map}" "/etc/rspamd/maps.d/dkim_selectors.map"
  mv "${dkim_paths_map}" "/etc/rspamd/maps.d/dkim_paths.map"

else
  rm -f "${dkim_selectors_map}"
  rm -f "${dkim_paths_map}"
fi

fi




#
# milter_headers.conf
# -------------------

logger -t "${0}" "Notice: Creating rspamd milter_headers.conf..."

milter_headers_conf=`umask 0077; mktemp /etc/rspamd/local.d/milter_headers.conf.XXXXXX`
chmod 644 "${milter_headers_conf}"

  cat >> ${milter_headers_conf} <<- EOF
# Generated by $0 on `date`
# DO NOT MODIFY THIS FILE - it will be overwritten on server restart.
#

extended_spam_headers = true;

use = ["spam-header"]

routines {
    spam-header {
        header = "X-Spam-Flag";
        value = "YES";
        remove = 0;
    }
}

EOF

mv "${milter_headers_conf}" "/etc/rspamd/local.d/milter_headers.conf"




#
# redis.conf
# ----------

logger -t "${0}" "Notice: Creating rspamd redis.conf..."

usermod -a -G redis rspamd

redis_conf=`umask 0077; mktemp /etc/rspamd/local.d/redis.conf.XXXXXX`
chmod 644 "${redis_conf}"

  cat >> ${redis_conf} <<- EOF
# Generated by $0 on `date`
# DO NOT MODIFY THIS FILE - it will be overwritten on server restart.
#

servers = "/run/redis/redis.sock";

EOF

mv "${redis_conf}" "/etc/rspamd/local.d/redis.conf"






logger -t "${0}" "Notice: Rspamd autodiscovery complete."



